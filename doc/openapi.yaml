openapi: 3.1.0
info:
  title: Resto Manager API
  description: Resto Manager API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /ping:
    get:
      description: Ping pong endpoint
      tags:
        - Health
      responses:
        200:
          description: ping pong
          content:
            application/json:
              schema:
                type: string
                example: "pong"

  /ingredients:
    put:
      description: Update ingredients
      tags:
        - Ingredient
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IngredientRest"
      responses:
        200:
          description: list of saved ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ingredient"

    post:
      description: Save ingredients
      tags:
        - Ingredient
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IngredientRest"
      responses:
        200:
          description: list of saved ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ingredient"

    get:
      parameters:
        - in: query
          name: priceMaxFilter
          description: maximal ingredient price to query
          required: false
          schema:
            type: integer
            example: 10000
        - in: query
          name: priceMinFilter
          description: minimal ingredient price to query
          required: false
          schema:
            type: integer
            example: 0
        - in: query
          name: pageSize
          description: amount of ingredient to query
          required: false
          schema:
            type: integer
            example: 5
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1

      description: Get a list of ingredient
      responses:
        200:
          description: list of ingredient
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngredientRestDetailled"
        400:
          description: bad request
          content:
            applocation/json:
              schema:
                type: string
                example: "bad request"

  /ingredients/{id}:
    get:
      description: Get info about a specific ingredient
      tags:
        - Ingredient
      responses:
        200:
          description: ingredient's info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientRest"
        404:
          description: ingredient not found
          content:
            application/json:
              schema:
                type: string
                example: "the ingredient is not found"

  /ingredients/{id}/prices:
    put:
      description: set ingredient's prices
      tags:
        - Ingredient
        - Price
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IngredientPrice"
      responses:
        200:
          description: prices saved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngredientPrice"

  /ingredients/{id}/stockMovement:
    put:
      description: set ingredient's prices
      tags:
        - Ingredient
        - Stock Movement
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/StockMovementRest"
      responses:
        200:
          description: prices saved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StockMovementRest"

  /dishes:
    get:
      description: Get list of dishes
      tags:
        - Dish
      responses:
        200:
          description: list of dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DishRest"

  /dishes/{id}/ingredients:
    put:
      description: Add ingredients (MakeUp) to a dish
      tags:
        - Dish
      parameters:
        - in: path
          name: id
          description: id of affected dish
          required: true
          schema:
            type: string
            example: "3"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/MakeUpCreation"
      responses:
        201:
          description: Ingredients added to dish
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MakeUpCreation"
        401:
          description: Bad request
          content:
            application/json:
              schema:
                type: string
                example: "Given ingredient don't exist"
        404:
          description: Dish not found
          content:
            application/json:
              schema:
                type: string
                example: "dish not found"

  /dishes/{id}/processingTime:
    get:
      description: Get data about processing time of a dish
      tags:
        - Dish
        - Dashboard
      parameters:
        - in: query
          name: timeFormat
          required: false
          schema:
            type: string
            examples:
              - "S"
              - "M"
              - "H"
            default: "S"
        - in: query
          name: processingTimeType
          required: false
          schema:
            type: string
            enum:
              - "MAXIMUM"
              - "AVERAGE"
              - "MINIMUM"
            example: "AVERAGE"
            default: "AVERAGE"
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: Processing time info of the dish
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DishProcessingTime"


  /orders/{reference}:
    get:
      description: Get order info
      tags:
        - Order
      parameters:
        - in: path
          name: reference
          required: true
          schema:
            type: string
            example: "3"
      responses:
        200:
          description: order info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderRest"
        404:
          description: order not found
          content:
            application/json:
              schema:
                type: string
                example: "Order not found"

  /orders/{reference}/dishes:
    put:
      description: Update dishes of an order
      tags:
        - Order
      parameters:
        - in: path
          name: reference
          required: true
          schema:
            type: string
            example: "3"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/DishOrderRestUpdate"

  /orders/{reference}/dishes/{dishId}:
    put:
      description: Update an dish status for an order
      tags:
        - Order
      parameters:
        - in: path
          name: reference
          required: true
          schema:
            type: string
            example: "3"
        - in: path
          name: dishId
          required: true
          schema:
            type: string
            example: "2"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectWithStatus"
      responses:
        200:
          description: Status updated
          content:
            application/json:
              schema:
                type: string
                example: "Dish status updated"
        404:
          description: Order or dish not found
          content:
            application/json:
              schema:
                type: string
                example: "Not found"

  /bestSales:
    get:
      description: Get X most sailed dishes
      tags:
        - Sale
        - Dish
        - Dashboard
      parameters:
        - in: query
          name: X
          required: true
          schema:
            type: integer
            example: 3
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: List of the most sailed dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DishSaleRest"


components:
  schemas:

    DishProcessingTime:
      type: object
      properties:
        processingTime:
          type: string
          example: "12m"
        processingTimeType:
          type: string
          enum:
            - MAXIMUM
            - AVERAGE
            - MINIMUM
          example: AVERAGE
          default: AVERAGE


    DishSaleRest:
      type: object
      properties:
        dishName:
          type: string
          example: "Pizza"
        sailedQuantity:
          type: integer
          example: 4
        totalGain:
          type: number
          example: 60000

    OrderRest:
      allOf:
        - $ref: "#/components/schemas/ObjectWithId"
        - $ref: "#/components/schemas/ObjectWithStatus"
      properties:
        dishes:
          type: array
          items:
            $ref: "#/components/schemas/DishOrderRest"

    DishOrderRestUpdate:
      type: object
      properties:
        dishId:
          type: string
          example: "3"
        quantity:
          type: integer
          example: 3

    DishOrderRest:
      allOf:
        - $ref: "#/components/schemas/ObjectWithStatus"
      properties:
        name:
          type: string
          example: "Pizza"
        unitPrice:
          type: number
          example: 1000
        quantity:
          type: integer
          example: 1


    DishRest:
      allOf:
        - $ref: "#/components/schemas/ObjectWithId"
      properties:
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/MakeUpRest"
        availableQuantity:
          type: integer
          example: 12

    MakeUpCreation:
      type: object
      properties:
        ingredientId:
          type: string
          example: "1"
        quantity:
          type: number
          example: 4

    MakeUpRest:
      type: object
      properties:
        ingredient:
          $ref: "#/components/schemas/IngredientRestWithStock"
        quantity:
          type: number
          example: 2

    IngredientRestWithStock:
      allOf:
        - $ref: "#/components/schemas/IngredientRest"
      properties:
        stock:
          type: number
          example: 4

    StockMovementRest:
      type: object
      properties:
        type:
          type: string
          enum:
            - "IN"
            - "OUT"
        quantity:
          type: number
        date:
          type: string
          format: date
          example: "2025-03-20T00:00:00Z"

    IngredientPrice:
      type: object
      properties:
        value:
          type: number
          example: 1000
        date:
          type: string
          format: date
          example: "2025-03-20T00:00:00Z"

    Ingredient:
      allOf:
        - $ref: "#/components/schemas/ObjectWithId"
      properties:
        name:
          type: string
          examples:
            - "Oeuf"
            - "Huile"
        price:
          $ref: "#/components/schemas/IngredientPrice"
        updatedAt:
          type: string
          format: date
          examples:
            - "2025-03-01T00:00:00Z"
            - "2025-03-20T00:00:00Z"
        unit:
          type: string
          enum:
            - "U"
            - "L"
            - "G"

    IngredientRestDetailled:
      allOf:
        - $ref: "#/components/schemas/ObjectWithId"
      properties:
        name:
          type: string
          examples:
            - "Oeuf"
        availableQuantity:
          type: number
          example: 20.0
        currentPrice:
          type: number
          examples:
            - 1000.0
        priceHistory:
          type: array
          items:
            $ref: "#/components/schemas/IngredientPrice"
        movementHistory:
          type: array
          items:
            $ref: "#/components/schemas/StockMovementRest"


    IngredientRest:
      allOf:
        - $ref: "#/components/schemas/ObjectWithId"
      properties:
        name:
          type: string
          examples:
            - "Oeuf"
            - "Huile"
        unitPrice:
          type: number
          examples:
            - 1000.0
            - 10000.0
        updatedAt:
          type: string
          format: date
          examples:
            - "2025-03-01T00:00:00Z"
            - "2025-03-20T00:00:00Z"

    ObjectWithStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - "CREATED"
            - "CONFIRMED"
            - "IN_PREPARATION"
            - "FINISHED"
            - "SERVED"
          example: "IN_PREPARATION"

    ObjectWithId:
      type: object
      properties:
        id:
          type: string
          examples:
            - "1"
            - "2"